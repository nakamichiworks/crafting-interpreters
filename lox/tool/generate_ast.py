import io
import sys
import textwrap
from pathlib import Path


def generate_ast():
    if len(sys.argv) == 1:
        print("Usage: generate_ast <output directory>")
        sys.exit(64)
    output_dir = sys.argv[1]
    define_ast(
        output_dir,
        "Expr",
        [
            "Binary   = left: Expr, operator: Token, right: Expr",
            "Grouping = expression: Expr",
            "Literal  = value: str | float | None",
            "Unary    = operator: Token, right: Expr",
        ],
    )


def define_ast(output_dir: str, base_name: str, types: list[str]):
    path = Path(output_dir) / f"{base_name.lower()}.py"
    with open(path, "w", encoding="utf-8") as f:
        src = textwrap.dedent(
            f"""\
            # Generated by {Path(__file__).name}
            from dataclasses import dataclass

            from lox.token_type import Token


            @dataclass(frozen=True)
            class {base_name}:
                pass
            """
        )
        f.write(src)

        for typ in types:
            class_name, fields = typ.split("=")
            class_name = class_name.strip()
            field_list = fields.strip().split(",")
            field_list = [field.strip() for field in field_list]
            define_type(f, base_name, class_name, field_list)


def define_type(
    f: io.TextIOBase, base_name: str, class_name: str, field_list: list[str]
):
    field_list = [field + "\n" for field in field_list]
    src = "\n\n"
    src += textwrap.dedent(
        f"""\
        @dataclass(frozen=True)
        class {class_name}({base_name}):
        """
    )
    src += f"    {'    '.join(field for field in field_list)}"
    f.write(src)


if __name__ == "__main__":
    generate_ast()
